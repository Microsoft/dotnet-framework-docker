parameters:
  phase: null
  imageBuilderImage: null
  manifest: null
  repo: null
  demands: []
  matrix: {}
phases:
  - phase: ${{ parameters.phase }}
    condition: or(eq(variables['singlePhase'], 'publish'), and(eq(variables['singlePhase'], ''), or(succeeded(), and(eq(variables['repo'], 'dotnet-framework-samples'), eq(variables['singlePhase'], ''), succeeded('Build_NanoServerSac2016_amd64'), succeeded('Build_NanoServer1709_amd64'), succeeded('Build_NanoServer1803_amd64')))))
    dependsOn:
      - Test_NanoServerSac2016_amd64
      - Test_NanoServer1709_amd64
      - Test_NanoServer1803_amd64
    queue:
      name: DotNetCore-Infra
      demands: ${{ parameters.demands }}
      parallel: 100
      matrix: ${{ parameters.matrix }}
    variables:
      imageBuilder.path: $(dotnetVersion)-*
      manifest: ${{ parameters.manifest }}
      repo: ${{ parameters.repo }}
    steps:
      - template: ../steps/docker-init-windows.yml
        parameters:
          imageBuilderImage: ${{ parameters.imageBuilderImage }}
      - script: $(Build.BinariesDirectory)/Microsoft.DotNet.ImageBuilder/Microsoft.DotNet.ImageBuilder.exe copyImages --manifest $(manifest) --path $(imageBuilder.path) --os-version $(osVersion) --source-server $(acr.server) --source-username $(acr.userName) --source-password $(BotAccount-dotnet-docker-acr-bot-password) --destination-username $(dockerRegistry.userName) --destination-password $(BotAccount-dotnet-dockerhub-bot-password) $(imageBuilder.queueArgs) $(imageBuilder.publishQueueArgs) $(acr.server)/$(repo)-$(stagingRepo.suffix)
        displayName: Copy Images
      - template: ../steps/docker-cleanup-windows.yml
